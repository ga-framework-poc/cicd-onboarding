name: 'onboard-system'
on:
  workflow_dispatch:
    inputs:
      system-name:
        description: 'system-name: Name of the system to be onboarded and managed by the CICD system'
        required: true
      team-name:
        description: 'team-name: Name of the team the system belongs to; determines proper namespace to run in'
        required: true
jobs:
  gather-system-info:
    runs-on: ubuntu-latest
    steps:
    - id: setup-environment
      name: setup-environment
      run: |
        set -ex
        CICD_MANAGER=cicd-manager
        echo "CICD_MANAGER=${CICD_MANAGER}" >> ${GITHUB_ENV}
        echo "SYSTEM_NAME=${{ github.event.inputs.system-name }}" >> ${GITHUB_ENV}
        echo "CICD_REPO_ONBOARDING_DIR=${GITHUB_WORKSPACE}/${{ github.event.repository.name }}" >> ${GITHUB_ENV}
        echo "CICD_REPO_MGR_DIR=${GITHUB_WORKSPACE}/${CICD_MANAGER}" >> ${GITHUB_ENV}
        echo "SYSTEM_DEFS_DIR=${GITHUB_WORKSPACE}/${CICD_MANAGER}/.github/system-defs" >> ${GITHUB_ENV}
        oc version
        set +ex
    - id: clone-cicd-onboarding-repo
      name: clone-cicd-onboarding-repo
      uses: actions/checkout@v2
      with:
        ref: development
        path: ${{ env.CICD_REPO_ONBOARDING_DIR }}
    - id: clone-cicd-manager-repo
      name: clone-cicd-manager-repo
      uses: actions/checkout@v2
      with:
        repository: ${{ github.repository_owner	}}/${{ env.CICD_MANAGER }}
        ref: development
        path: ${{ env.CICD_REPO_MGR_DIR }}
    - id: parse-system-def
      name: parse-system-def
      run: |
        set -ex
        SYSTEM_DEFS_FILE=$(ls ${SYSTEM_DEFS_DIR}/${SYSTEM_NAME}.y*)
        DEV_BRANCH=$(yq e '.branch' "${SYSTEM_DEFS_FILE}")
        REPO_NAMES=$(yq e '[.organization + "/" + .components[].repo]' "${SYSTEM_DEFS_FILE}" -o json)
        echo "DEV_BRANCH: ${DEV_BRANCH}"
        echo "REPO_NAMES: ${REPO_NAMES}"
        echo ::set-output name=component-branch::$(echo ${DEV_BRANCH})
        echo ::set-output name=component-repos::$(echo ${REPO_NAMES})
        set +ex
    outputs:
      DEV_BRANCH: ${{ steps.parse-system-def.outputs.component-branch }}
      component-repos: ${{ steps.parse-system-def.outputs.component-repos }}
      CICD_REPO_ONBOARDING_DIR: ${{ env.CICD_REPO_ONBOARDING_DIR }}
      CICD_MANAGER: ${{ env.CICD_MANAGER }}
      CICD_REPO_MGR_DIR: ${{ env.CICD_REPO_MGR_DIR }}
      SYSTEM_DEFS_DIR: ${{ env.SYSTEM_DEFS_DIR }}
  create-environments:
    runs-on: ubuntu-latest
    needs: gather-system-info
    env:
      SYSTEM_NAME: ${{ github.event.inputs.system-name }}
      TEAM_NAME: ${{ github.event.inputs.team-name }}
    steps:
    - id: create-deploy-environments
      name: create-deploy-environments
      run: |
        set -ex

        oc login --insecure-skip-tls-verify -u ${{ secrets.OCP_USER }} -p ${{ secrets.OCP_CREDS }} ${{ secrets.OCP_URL }}
        
        echo 'Create dev OCP Project'
        if [[ -z $(oc get --ignore-not-found project ${SYSTEM_NAME}-${TEAM_NAME}-dev) ]]
        then
            echo 'dev OCP Project not found: CREATING'
            oc new-project ${SYSTEM_NAME}-${TEAM_NAME}-dev
        else
            echo 'dev OCP Project found: SKIPPING'
        fi

        set +ex
  onboard-system:
    runs-on: ubuntu-latest
    needs: gather-system-info
    env:
      CICD_REPO_ONBOARDING_DIR: ${{ needs.gather-system-info.outputs.CICD_REPO_ONBOARDING_DIR }}
      CICD_MANAGER: ${{ needs.gather-system-info.outputs.CICD_MANAGER }}
      CICD_REPO_MGR_DIR: ${{ needs.gather-system-info.outputs.CICD_REPO_MGR_DIR }}
      SYSTEM_DEFS_DIR: ${{ needs.gather-system-info.outputs.SYSTEM_DEFS_DIR }}
      DEV_BRANCH: ${{ needs.gather-system-info.outputs.DEV_BRANCH }}
    strategy:
      matrix:
        component-repo: ${{ fromJSON(needs.gather-system-info.outputs.component-repos) }}
    steps:
      - id: setup-environment
        name: setup-environment
        run: |
          set -ex
          echo "WORKING_DIR=${GITHUB_WORKSPACE}/${{ matrix.component-repo }}" >> ${GITHUB_ENV}
          set +ex
      - id: clone-cicd-onboarding-repo
        name: clone-cicd-onboarding-repo
        uses: actions/checkout@v2
        with:
          ref: development
          path: ${{ env.CICD_REPO_ONBOARDING_DIR }}
      - id: clone-cicd-manager-repo
        name: clone-cicd-manager-repo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner	}}/${{ env.CICD_MANAGER }}
          ref: development
          path: ${{ env.CICD_REPO_MGR_DIR }}
      - id: clone-app-repo
        name: clone-app-repo
        uses: actions/checkout@v2
        with:
          repository: ${{ matrix.component-repo }}
          ref: ${{ env.DEV_BRANCH }}
          path: ${{ env.WORKING_DIR }}
          token: ${{ secrets.ONBOARDING_CREDS }}
      - id: install-github-workflow-directory
        name: install-github-workflow-directory
        env:
          SYSTEM_NAME: ${{ github.event.inputs.system-name }}
          TEAM_NAME: ${{ github.event.inputs.team-name }}
        run: |
          set -ex

          echo 'Generating build.yml for ${{ matrix.component-repo }}'
          for F_NAME in $(find ${CICD_REPO_ONBOARDING_DIR}/.github-app-template/workflows -name "*.yml" -or -name "*.yaml")
          do
              mv ${F_NAME} $(echo ${F_NAME} | sed -e "s/.yml$/-${TEAM_NAME}.yml/" -e "s/.yaml$/-${TEAM_NAME}.yaml/") ;
          done

          find ${CICD_REPO_ONBOARDING_DIR}/.github-app-template/workflows/ -type f \( -iname \*.yml -o -iname \*.yaml \) \
            -exec sed -i -e "s/%SYSTEM_NAME%/${SYSTEM_NAME}/g" \
                         -e "s/%TEAM_NAME%/${TEAM_NAME}/g" {} +

          cp -RT ${CICD_REPO_ONBOARDING_DIR}/.github-app-template ${WORKING_DIR}/.github

          git -C ${WORKING_DIR} add -u
          if [[ ! -z "$(git -C ${WORKING_DIR} status --porcelain)" ]]
          then
              git -C ${WORKING_DIR} config user.email ${cicd-team@my-org.com}
              git -C ${WORKING_DIR} config user.name ${GITHUB_ACTOR}
              git -C ${WORKING_DIR} add -A
              git -C ${WORKING_DIR} commit -am '[skip ci] installing latest cicd-manager GitHub Action Workflow(s)'
              git -C ${WORKING_DIR} push
              echo "Pushed ${WORKING_DIR}/.github to ${{ matrix.component-repo }}"
          else
              echo "${{ matrix.component-repo }} is unchanged.  Skipping..."
          fi

          set +ex
